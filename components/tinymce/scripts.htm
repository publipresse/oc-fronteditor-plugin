
{% put scripts %}
<script>
let initEditors, destroyEditors, saveEditors;

addEventListener('page:loaded', function() {
    const wrapper = document.querySelector('#fe-wrapper');
    const buttons = wrapper.querySelector('#fe-buttons');
    const folder = wrapper.querySelector('#fe-folder').value
    const offset = parseInt(getComputedStyle(wrapper).getPropertyValue('--toolbar-sticky-offset'));

    initEditors = function() {
        const flmngrapi = wrapper.querySelector('#fe-flmngr').value;
        const skin = wrapper.querySelector('#fe-skin').value;
        const language = wrapper.querySelector('#fe-language').value;
        const editors = document.querySelectorAll('[data-editable]');
        
        // Add class to body
        document.querySelector('body').classList.add('fe-open');
        
        // Don't display infinite loading if there is no editable content
        if(editors.length > 0) {
            buttons.classList.add('fe-loading');
        }
        
        if (typeof Flmngr != 'undefined') {
            // Preload file manager
            Flmngr.load({
                apiKey: flmngrapi,
                urlFileManager: '/flmngr',
                urlFiles: folder,
                integration: 'octobercms',
            });
        }
    
        editors.forEach(function(el) {
            const plugins = ['link', 'anchor', 'lists', 'media', 'code', 'table', 'emoticons', 'autolink', 'image', 'accordion', 'visualblocks'];
            const isMedia = el.hasAttribute('data-media');
            
            // If toolbar is a preset : load it
            let toolbar = el.dataset.toolbar;
            if(toolbar.trim().indexOf(' ') == -1 == true) {
                let toolbarPreset = wrapper.querySelector('#fe-toolbar-'+toolbar.split(' ')[0]);
                if(toolbarPreset) {
                    toolbar = toolbarPreset.value;
                }
            }

            // If media == image or video
            if(isMedia) {
                switch(el.dataset.media) {
                    case 'image':
                        toolbar += ' image';
                        break;
                    case 'video':
                        toolbar += ' media';
                        break;
                    default:
                        toolbar += ' image media';
                        break;
                }
            }
            
            // If styles is a preset : load it
            let styles = el.dataset.styles || toolbar.includes("styles");
            if (styles) {
                if(!toolbar.includes("styles")) {
                    toolbar += ' styles';
                }
                let stylesPreset = wrapper.querySelector('#fe-style-' + el.dataset.styles?.trim());
                if(!stylesPreset) {
                    stylesPreset = wrapper.querySelector('[id*="fe-style"]');
                }
                
                if (stylesPreset) {
                    styles = stylesPreset.value;
                    try {
                        styles = JSON.parse(styles);
                    } catch (e) {
                        console.log(e);
                    }
                }
            }


            // Load forecolors
            let forecolors = wrapper.querySelector('#fe-forecolors').value;
            if (forecolors.length > 0) {
                forecolors = JSON.parse(forecolors);
                forecolors = forecolors.map(item => [item.color, item.name]).flat();
            }
            
            // Load backcolors
            let backcolors = wrapper.querySelector('#fe-backcolors').value;
            if (backcolors.length > 0) {
                backcolors = JSON.parse(backcolors);
                backcolors = backcolors.map(item => [item.color, item.name]).flat();
            }
    
            // Init TinyMCE
            tinymce.init({
                target: el,
                inline: true,
                skin: skin,
                language: language,
                plugins: plugins,
                entity_encoding: 'raw',
                menubar: false,
                toolbar: toolbar,
                {% if __SELF__.toolbarMode == 'fixed' %}
                    fixed_toolbar_container: '#fe-toolbar',
                {% else %}
                    toolbar_sticky: true,
                    toolbar_location: 'auto',
                    toolbar_sticky_offset: offset,
                {% endif %}
                link_context_toolbar: true,
                table_appearance_options: false,
                table_toolbar: '',
                extended_valid_elements: 'img[src|width|height|alt|style|loading],iframe[src|allowfullscreen]',
                preview_styles: false,
                relative_urls: true,
                object_resizing: false,
                image_dimensions: false,
                media_dimensions: false,
                save_enablewhendirty: false,
                paste_block_drop: true,
                style_formats: styles,
                style_formats_merge: false,
                style_formats_autohide: true,
                formats: {
                    underline: { inline: 'u', exact: true }
                },
                end_container_on_empty_block: true,
                color_map_foreground: forecolors,
                color_map_background: backcolors,
                custom_colors: false,
                setup: function(editor) {
    
                    editor.on('init', function(e) {
                        // Add buttons loading and open options
                        buttons.classList.remove('fe-loading');
                        buttons.classList.add('fe-open');
                    });
                    
                    editor.on('BeforeExecCommand', function(e) {
                        switch(e.command) {
                            // Remove previous class when switching format.
                            case 'mceToggleFormat':
                                var target = editor.selection.getNode();
                                target.className = '';
                                break;
                        }
                    });
                    
                    editor.on('execCommand', function(e) {
                        switch(e.command) {
                            // When image dialog is saved
                            case 'mceUpdateImage':
                                let target = editor.selection.getNode();
                                let src = target.getAttribute('src').replace('../', '');
                                let path = folder.substring(1);
                                
                                // Set width, height and aspect ratio to respect ones defined in the component
                                target.setAttribute('width', el.dataset.width);
                                target.setAttribute('height', el.dataset.height);
                                target.setAttribute('loading', el.dataset.loading || 'lazy');
                                target.style.aspectRatio = el.dataset.width + '/' + el.dataset.height;
                                
                                // Save original image path to custom data attribute to prevent saving resized images later.
                                if(src.includes(path)) {
                                    let filepath = src.split('?')[0].replace(path, '').substring(1);
                                    target.setAttribute('data-filepath', filepath);
                                }
                                break;
                        }
                    });
    
                    // Prevent editor with only just images and media to allow something else
                    editor.on('keydown', function (e) {
                        if(isMedia) {
                            e.preventDefault();
                            e.stopPropagation();
                        }
                    });
    
                    // Add paragraph
                    editor.ui.registry.addButton('p', {
                        icon: 'paragraph',
                        tooltip: 'Paragraph',
                        onAction: function(api) { 
                            editor.formatter.apply('p');
                        }
                    });
    
                    // Add edit image floating button
                    editor.ui.registry.addButton('image-edit', {
                        icon: 'edit-image',
                        tooltip: 'Edit',
                        onAction: function(api) { 
                            const target = editor.selection.getNode();
                            Flmngr.editAndUpload({
                                apiKey: flmngrapi,
                                url: target.getAttribute('src'),
                                integration: 'octobercms',
                                onSave: function(urlNew) {
                                    target.setAttribute('src', Flmngr.getNoCacheUrl(urlNew));
                                }
                            });
    
                        }
                    });
                    
                    // Add edit image button to context toolbar
                    editor.ui.registry.addContextToolbar('image', {
                        predicate: (node) => node.nodeName.toLowerCase() === 'img',
                        items: 'link image image-edit',
                        position: 'node',
                        scope: 'node'
                    });
    
                },
                file_picker_callback: function(callback, value, meta) {
                    Flmngr.open({
                        apiKey: flmngrapi,
                        isMultiple: false,
                        //urlFiles: folder,
                        integration: 'octobercms',
                        onFinish: function(files) {
                            const url = Flmngr.getNoCacheUrl(files[0].url);
                            callback(url);
                        },
                    });
                },
            });
            
        });
    }
    
    destroyEditors = function() {
        
        buttons.classList.add('fe-loading');
        const editors = tinymce.get();

        // Remove class to body
        document.querySelector('body').classList.remove('fe-open');

        editors.forEach(function(editor) {
            editor.resetContent();
            editor.remove();
        });
        buttons.classList.remove('fe-loading', 'fe-open');
    }
    
    saveEditors = function() {
        const editors = tinymce.get();
        let isDirty = false;
        
        buttons.classList.add('fe-loading');

        // Remove class to body
        document.querySelector('body').classList.remove('fe-open');
    
        // Check if at least one editor has changed;
        editors.forEach(function(editor) {
            if(editor.isDirty() == true) {
                isDirty = true;
            }
        });
    
        // Of nothing has changed, remove tinyMCE Instance, reset buttons and stop.
        if(isDirty === false) {
            tinyMCE.remove();
            buttons.classList.remove('fe-loading', 'fe-open');
            return;
        }

        editors.forEach(function(editor, index) {
            
            const element = editor.getElement();
            let alias = element.dataset.editable;
            const file = element.dataset.file;
            const shared = element.dataset.shared;
            let content = editor.getContent();
    
            // Conver images markup to use october syntax and resize filter.
            if(editor.isDirty()) {
                let dom = new DOMParser().parseFromString(content, "text/html").body;
                if(dom) {
                    dom.querySelectorAll('img').forEach(function(el) {
                        el.removeAttribute('style');
                        const width = element.dataset.width == 0 ? null : element.dataset.width;
                        const height = element.dataset.height == 0 ? null : element.dataset.height;
                        const mode = element.dataset.mode == 0 ? 'auto' : element.dataset.mode;
                        const filepath = el.dataset.filepath;
                        {% verbatim %}
                            el.src = decodeURI("{{ '" + filepath + "'|media|resize("+width+", "+height+", '"+mode+"') }}");
                        {% endverbatim %}
                        content = dom.innerHTML;
                    });
                }
            }
    
            if(editor.isDirty()) {
                // Save data
                oc.ajax(alias+'::onSave', {
                    data: {
                        file: file,
                        content: content,
                    },
                    success: function() {
                        editor.remove();
                    }
                });
            } else {
                editor.remove();
            }
            buttons.classList.remove('fe-loading', 'fe-open');

            // Save page on last iteration if one editor has been modified
            if (index === editors.length - 1) {
                if(isDirty == true) {
                    oc.ajax(alias+'::onUpdatePage');
                }
            }
        });
        
    }

})
</script>
{% endput %}
